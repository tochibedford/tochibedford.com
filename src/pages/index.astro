---
import HeroLayout from "../layouts/HeroLayout.astro";
import MatterWorld from "../components/MatterWorld.astro";
import { works } from "../staticData";
---

<HeroLayout>
  <main class="py-10 sm:px-10 sm:p-10 text-left ubuntu_mono_font">
    <section class="px-2 lg:px-16 md:px-8 text-xl">
      <div class="w-16 h-16 overflow-hidden rounded-md float-left my-1 mr-2">
        <img src="/tochi.jpg" alt="profile image" class="saturate-0" />
      </div>
       I am a developer based in Lagos, Nigeria working on web apps, tools and
      services for everyday consumers and other developers like myself. I am an
      open-source contributor, especially when it comes to <a
        class="font-bold underline"
        href="/tools">tools I use</a
      >.
      <br />
       I've worked on everything from consumer facing production-ready
      applications to hobby tools and templates used by a few dozen people,
      check out my highlights below.
    </section>
    <h2
      class="lg:px-8 md:px-0 md:text-left text-center px-2 mt-10 vina_font text-5xl py-5 text-tMenuDark"
    >
      highlights
    </h2>
    <section class="lg:px-8 md:px-0 px-2 overflow-auto py-2 text-left">
      <div id="highlightsSection" class="isolate group">
        {
          works.map((work, index, arr) => {
            return (
              <>
                <div
                  tabindex="0"
                  class={
                    "hidden overflow-hidden highlightedWorkItem min-h-[16rem] rounded-md shadow-md relative bg-tWhiteBrighter transition-all p-10 sm:flex flex-col gap-3 " +
                    (index !== arr.length - 1 //applies to everything but last element
                      ? " border border-b-tMenuBack "
                      : "") +
                    (index !== 0
                      ? ` sm:-mt-56 lg:-mt-56 group-hover:mt-4 `
                      : "") + //applies to everything but first element
                    (index === 0 ? ` group isFirst ` : "") //applies to only first element
                  }
                  data-min-scale={1 - (index / (arr.length - 1)) * (1 - 0.95)}
                  data-min-opacity={
                    index < 3 ? 1 - (index / (arr.length - 1)) * (1 - 0.25) : 0
                  }
                  style={`z-index: ${3 - index};`}
                >
                  <div class="text-3xl sm:text-5xl md:text-5xl lg:text-8xl font-bold uppercase text-tBlack whitespace-nowrap">
                    {work.title}
                  </div>
                  <div class="text-xl">{work.desc}</div>
                  <div>
                    Links:
                    {work.links.map((link) => {
                      return (
                        <a href={link.url} target="_blank" class="group/link">
                          <span class=" bg-tBlack text-tWhite px-2 rounded-md group-hover/link:scale-110 inline-block transition-transform">
                            {link.state}
                          </span>
                        </a>
                      );
                    })}
                  </div>
                  <div class="absolute bottom-0 right-0 p-2 bg-tBlack text-tWhite rounded-tl-md opacity-0 group-hover:opacity-100 group-[.isFirst]:opacity-100 transition-opacity">
                    {work.tools.join(", ")}
                  </div>
                </div>

                {/**phone screens*/}
                <div
                  class={
                    "overflow-hidden min-h-[16rem] rounded-md shadow-md relative bg-tWhiteBrighter transition-all p-5 sm:hidden flex-col gap-3 " +
                    (index !== arr.length - 1 //applies to everything but last element
                      ? " border border-b-tMenuBack "
                      : "") +
                    (index !== 0
                      ? ` sm:-mt-56 lg:-mt-56 sm:group-hover:mt-4 mt-4 `
                      : "") + //applies to everything but first element
                    (index === 0 ? ` group isFirst ` : "") //applies to only first element
                  }
                  style={`z-index: ${3 - index};`}
                >
                  <div class="text-3xl sm:text-5xl md:text-5xl lg:text-8xl font-bold uppercase text-tBlack whitespace-nowrap">
                    {work.title}
                  </div>
                  <div class="text-xl">{work.desc}</div>
                  <div>
                    Links:
                    {work.links.map((link) => {
                      return (
                        <a href={link.url} target="_blank" class="group/link">
                          <span class=" bg-tBlack text-tWhite px-2 rounded-md group-hover/link:scale-110 inline-block transition-transform">
                            {link.state}
                          </span>
                        </a>
                      );
                    })}
                  </div>
                  <div class="absolute bottom-0 right-0 p-1 bg-tBlack text-tWhite text-xs rounded-tl-md sm:opacity-0 group-hover:opacity-100 group-[.isFirst]:opacity-100 transition-opacity">
                    {work.tools.join(", ")}
                  </div>
                </div>
              </>
            );
          })
        }
      </div>
    </section>
    <section class="lg:px-8 md:px-0 px-2 pt-5 relative">
      <MatterWorld />
      <div
        id="nunText"
        class="uppsercase opacity-0 pointer-events-none absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-5xl font-bold text-center"
      >
        NUN' TOO MUCH
      </div>
      <div
        id="hitMeUpText"
        class="opacity-0 uppercase pointer-events-none absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-5xl font-bold text-center"
      >
        Hit Me Up
      </div>
      <div
        aria-label="tochibedford.work@gmail.com"
        id="emailText"
        class="opacity-0 pointer-events-none absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 sm:text-5xl text-3xl font-bold text-center"
      >
        tochibedford.work [at] gmail.com
      </div>
      <div
        aria-label="tochibedford.work@gmail.com"
        id="emailText"
        class="pointer-events-none animate-bounce absolute bottom-20 left-1/2 -translate-x-1/2 text-5xl font-bold text-center"
      >
        <span class="rotate-180 inline-block text-5xl font-normal">^</span>
      </div>
      <div class="w-max mt-5 mx-auto">
        <button
          class="p-2 text-2xl border-tBlack border rounded-lg hover:scale-95 transition-transform relative"
          id="copyButton"
        >
          <span id="copyText" class="inline-block">Copy E-mail</span>
          <span
            id="okText"
            class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 select-none inline-block opacity-0"
            >✅</span
          >
        </button>
        <a
          href="mailto:tochibedford.work@gmail.com?subject=Hey👋🏽"
          class="inline-block p-2 text-2xl border-tBlack border bg-tBlack text-tWhite rounded-lg hover:scale-95 transition-transform"
          id="sendButton">Send E-mail</a
        >
      </div>
    </section>
  </main>
</HeroLayout>

<script>
  const highlightsSection = document.getElementById("highlightsSection");
  const workItems = document.querySelectorAll<HTMLDivElement>(
    ".highlightedWorkItem"
  );

  const animationFrame = () => {
    if (highlightsSection && highlightsSection?.matches(":hover")) {
      workItems.forEach((item) => {
        item.style.scale = "1";
        item.style.opacity = "1";
        item.style.height = "auto";
      });
    } else {
      highlightsSection?.scrollTo({
        top: 0,
        left: 0,
        behavior: "smooth",
      });
      workItems.forEach((item) => {
        const minScale = item.getAttribute("data-min-scale")!;
        const minOpacity = item.getAttribute("data-min-opacity")!;
        item.style.height = "16rem";
        item.style.scale = minScale;
        item.style.opacity = minOpacity;
      });
    }
    requestAnimationFrame(animationFrame);
  };
  requestAnimationFrame(animationFrame);
</script>

<script>
  import { gsap } from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: "#nunText",
    },
  });
  tl.fromTo(
    "#nunText",
    { x: -50, opacity: 0 },
    { x: 0, opacity: 1, delay: 2, duration: 0.5 }
  )
    .to("#nunText", {
      y: -50,
      opacity: 0,
      delay: 3,
      duration: 0.5,
    })
    .fromTo(
      "#hitMeUpText",
      {
        y: 50,
      },
      {
        y: 0,
        opacity: 1,
        duration: 0.3,
      },
      "-=0.5"
    )
    .to("#hitMeUpText", {
      y: -50,
      opacity: 0,
      duration: 0.3,
      delay: 2,
    })
    .fromTo(
      "#emailText",
      {
        y: 50,
      },
      {
        y: 0,
        opacity: 1,
        duration: 0.3,
      },
      "-=0.3"
    );
</script>

<script>
  import { gsap } from "gsap";
  const copyButtonClicked = gsap.timeline({
    onComplete: () => {
      copyButton.disabled = true;
    },
    onReverseComplete: () => {
      copyButton.disabled = false;
    },
  });

  const copyButton = document.querySelector<HTMLButtonElement>("#copyButton")!;
  const copyText = document.querySelector<HTMLButtonElement>("#copyText")!;
  const okText = document.querySelector<HTMLButtonElement>("#okText")!;
  copyButtonClicked
    .to(copyText, {
      y: -20,
      opacity: 0,
      duration: 0.1,
      ease: "expo.inOut",
      onComplete: () => {
        copyText.hidden = true;
      },
    })
    .fromTo(
      okText,
      {
        y: 20,
        ease: "expo.inOut",
      },
      {
        y: 0,
        opacity: 1,
        duration: 0.1,
        ease: "expo.inOut",
        onReverseComplete: () => {
          copyText.hidden = false;
        },
      }
    )
    .pause();
  copyButton.onclick = () => {
    navigator.clipboard
      .writeText("tochibedford.work@gmail.com")
      .then(() => {
        copyButtonClicked.play();
        setTimeout(() => {
          copyButtonClicked.reverse();
        }, 3000);
      })
      .catch((res) => {
        console.error(res);
      });
  };
</script>
